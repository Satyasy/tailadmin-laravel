# .github/workflows/deploy.yml
name: Deploy TailAdmin Laravel

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  WWWGROUP: 1000
  WWWUSER: 1000

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file
      run: |
        cp .env.example .env
        echo "APP_NAME=TailAdmin" >> .env
        echo "APP_ENV=production" >> .env
        echo "APP_DEBUG=false" >> .env
        echo "APP_URL=http://localhost:8090" >> .env
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=mysql" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=tailadmin_laravel" >> .env
        echo "DB_USERNAME=sail" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "WWWGROUP=1000" >> .env
        echo "WWWUSER=1000" >> .env
        echo "DOCKER_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env

    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Stop existing containers
      run: |
        docker-compose -f docker-compose.prod.yml down || true
        docker system prune -f || true

    - name: Build and tag Docker image
      run: |
        # Build menggunakan Dockerfile production
        docker build -f Dockerfile.prod -t ${{ secrets.DOCKERHUB_USERNAME }}/tailadmin-laravel:beta .
        docker tag ${{ secrets.DOCKERHUB_USERNAME }}/tailadmin-laravel:beta ${{ secrets.DOCKERHUB_USERNAME }}/tailadmin-laravel:latest

    - name: Push Docker image to DockerHub
      run: |
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tailadmin-laravel:beta
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/tailadmin-laravel:latest

    - name: Deploy with Laravel Sail
      run: |
        # Start services menggunakan production compose
        docker-compose -f docker-compose.prod.yml up -d --build

        # Wait for MySQL to be ready
        echo "Waiting for MySQL to be ready..."
        timeout 60 bash -c 'until docker-compose -f docker-compose.prod.yml exec -T mysql mysqladmin ping -h"mysql" --silent; do sleep 2; done'

        # Run migrations and seed
        docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force
        docker-compose -f docker-compose.prod.yml exec -T app php artisan db:seed --force

        # Clear and cache config
        docker-compose -f docker-compose.prod.yml exec -T app php artisan config:clear
        docker-compose -f docker-compose.prod.yml exec -T app php artisan cache:clear
        docker-compose -f docker-compose.prod.yml exec -T app php artisan view:clear
        docker-compose -f docker-compose.prod.yml exec -T app php artisan config:cache

    - name: Health check
      run: |
        # Wait for application to be ready
        sleep 15

        # Check if application is running on port 8090
        curl -f http://localhost:8090 || exit 1

        echo "âœ… Application is running successfully on port 8090"
        echo "ðŸ”— Access URL: http://your-server-ip:8090"
        echo "ðŸ‘¤ Admin Login: admin@tailadmin.dev / admin"
